APP_NAME: Gen3 Data Commons
# Where fence microservice is deployed
BASE_URL: https://gen3staging.kidsfirstdrc.org/user
# flask's debug setting
# WARNING: DO NOT ENABLE IN PRODUCTION
DEBUG: false
# if true, will automatically login a user with username "test"
MOCK_AUTH: false
# if true, will only fake a successful login response from Google in /login/google
MOCK_GOOGLE_AUTH: false
# if true, will ignore anything configured in STORAGE_CREDENTIALS
MOCK_STORAGE: true
# set if you want browsers to only send cookies with requests over HTTPS
SESSION_COOKIE_SECURE: true

ENABLE_CSRF_PROTECTION: true

# //////////////////////////////////////////////////////////////////////////////////////
# LIBRARY CONFIGURATION (authlib & flask)
#   - Already contains reasonable defaults
# //////////////////////////////////////////////////////////////////////////////////////
# authlib-specific configs for OIDC flow and JWTs
# NOTE: the OAUTH2_JWT_KEY cfg gets set automatically by fence if keys are setup
#       correctly
OAUTH2_JWT_ALG: 'RS256'
OAUTH2_JWT_ENABLED: true
OAUTH2_JWT_ISS: '{{BASE_URL}}'
OAUTH2_PROVIDER_ERROR_URI: '/api/oauth2/errors'

# used for flask, "path mounted under by the application / web server"
# since we deploy as microservices, fence is typically under {{base}}/user
# this is also why our BASE_URL default ends in /user
APPLICATION_ROOT: '/user'


# //////////////////////////////////////////////////////////////////////////////////////
# Tokens, Lifetimes, & Expirations
#   - Already contains reasonable defaults
# //////////////////////////////////////////////////////////////////////////////////////
# The name of the browser cookie in which the access token will be stored.
ACCESS_TOKEN_COOKIE_NAME: "access_token"

# The name of the browser cookie in which the session token will be stored.
# Note that the session token also stores information for the
# ``flask.session`` in the ``context`` field of the token.
SESSION_COOKIE_NAME: "fence"

OAUTH2_TOKEN_EXPIRES_IN:
  "authorization_code": 1200
  "implicit": 1200

# The number of seconds after an access token is issued until it expires.
ACCESS_TOKEN_EXPIRES_IN: 1200

# The number of seconds after a refresh token is issued until it expires.
REFRESH_TOKEN_EXPIRES_IN: 2592000

# The maximum session lifetime in seconds.
SESSION_LIFETIME: 28800

# The number of seconds the user's Google service account key used for
# url signing will last before being expired/rotated
# 30 days: 2592000 seconds
GOOGLE_SERVICE_ACCOUNT_KEY_FOR_URL_SIGNING_EXPIRES_IN: 2592000

# The number of seconds after a User's Google Service account is added to bucket
# access until it expires.
# 7 days: 604800 seconds
GOOGLE_USER_SERVICE_ACCOUNT_ACCESS_EXPIRES_IN: 604800

# The number of seconds after a User's Google account is added to bucket
# access until it expires.
GOOGLE_ACCOUNT_ACCESS_EXPIRES_IN: 86400

# The number of seconds after a pre-signed url is issued until it expires.
MAX_PRESIGNED_URL_TTL: 3600

# The number of seconds after an API KEY is issued until it expires.
MAX_API_KEY_TTL: 2592000

# The number of seconds after an access token is issued until it expires.
MAX_ACCESS_TOKEN_TTL: 3600

# //////////////////////////////////////////////////////////////////////////////////////
# SHIBBOLETH
#   - Support using `shibboleth` in ENABLED_IDENTITY_PROVIDERS
#   - Contains defaults for using NIH's Login.
# //////////////////////////////////////////////////////////////////////////////////////
# assumes shibboleth is deployed under {{BASE_URL}}/shibboleth
SHIBBOLETH_HEADER: 'persistent_id'
SSO_URL: 'https://auth.nih.gov/affwebservices/public/saml2sso?SPID={{BASE_URL}}/shibboleth&RelayState='
ITRUST_GLOBAL_LOGOUT: 'https://auth.nih.gov/siteminderagent/smlogout.asp?mode=nih&AppReturnUrl='

# //////////////////////////////////////////////////////////////////////////////////////
# LOGIN
#   - Modify based on which OIDC client(s) you configured above
#   - NOTE: You can have multiple IDPs for users to login with, but one has to be set
#           as the default
# //////////////////////////////////////////////////////////////////////////////////////
# Login url for identity provider (IDP):
#   Google? Use: '{{BASE_URL}}/login/google'
#   Multi-tenant fence (e.g. another fence instance)? Use: '{{BASE_URL}}/login/fence'
#   Sibboleth? Use: '{{BASE_URL}}/login/shib'
DEFAULT_LOGIN_URL: '{{BASE_URL}}/login/google'
DEFAULT_LOGIN_IDP: fence
LOGIN_OPTIONS:  # !!! remove the empty list to enable login options!
  - name: 'Login from Google'
    idp: google
  - name: 'NIH Login'
    idp: fence
    fence_idp: shibboleth
    shib_idps:
      - https://auth.nih.gov/IDP
  - name: 'Login from RAS'
    idp: ras
  - name: 'ORCID Login'
    idp: fence
    fence_idp: orcid

# The following can be used for shibboleth login, simply uncomment.
#
# NOTE: Don't enable shibboleth if the deployment is not protected by
# shibboleth module, the shib module takes care of preventing header
# spoofing.
#
#    shibboleth:
#      name: 'NIH Login'

S3_BUCKETS:
  1000genomes:
    cred: 'gen3qa'
    region: 'us-east-1'
  kf-nonprod-data-dev:
    cred: 'gen3qa'
    region: 'us-east-1'
  kf-seq-data-.*:
    cred: 'gen3qa'
    region: 'us-east-1'
  kf-study-.*:
    cred: 'gen3qa'
    region: 'us-east-1'

# `DATA_UPLOAD_BUCKET` specifies an S3 bucket to which data files are uploaded,
# using the `/data/upload` endpoint. This must be one of the first keys under
# `S3_BUCKETS` (since these are the buckets fence has credentials for).
DATA_UPLOAD_BUCKET: 'bucket1'

# Prefix to namespace Google Groups on a single Cloud Identity (see cirrus
# setup for more info on Cloud Identity)
#
# NOTE: Make this short! Less than 8 characters if possible. Google has
#       length restrictions on group names.
GOOGLE_GROUP_PREFIX: 'kf'

ENABLE_DB_MIGRATION: false
